#!/usr/bin/env bash

# Copyright (c) 2024 Quantius Benignus
# Copyright (c) 2025 David Whittington - cleanup and customization
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# NAME: wsi 
# PREREQUSITES: 
#  - whisper.cpp (see https://github.com/ggerganov/whisper.cpp) 
#  - recent versions of 'sox', 'curl', 'jq', 'xsel' or 'wl-copy' CLI tools
#  - notify-send for desktop notifications

#set -x

# Detect X11 or Wayland (2nd line may catch edge cases):
wm="$XDG_SESSION_TYPE"

##
## Configuration
##

# Store temp files in memory for speed and to reduce SSD/HDD "grinding"
TEMPD='/dev/shm'
model="$HOME/Work/oss/whisper.cpp/models/ggml-base.en.bin"
ramf="$TEMPD/wsifile.wav"
NTHR=$(( $(getconf _NPROCESSORS_ONLN) / 2 ))
# Use PRIMARY selection (middle mouse button to paste) unless CLIPBOARD selected from GUI 
CLIPBOARD=false
# Use whisper-cpp if specified, but default to OpenAI's API
use_whisper_cpp=false

##
## Check dependencies
##

command -v curl &>/dev/null || { echo "curl is required. Please, install curl." >&2 ; exit 1 ; }
command -v sox &>/dev/null || { echo "sox is required. Please, install sox." >&2 ; exit 1 ; }
command -v whisper-cpp &>/dev/null || { 
    echo -e "whisper-cpp is required. Please, install whisper.cpp (see https://github.com/ggerganov/whisper.cpp)." >&2 
    exit 1 
}
command -v notify-send &>/dev/null || {
    echo "notify-send is required for notifications. Please install libnotify-bin" >&2
    exit 1 
}
if [[ wm == "wayland" ]]; then
    command -v wl-copy &>/dev/null || { 
        echo "wl-copy is needed for the clipboard. Please, install wl-copy" >&2
        exit 1
    } 
elif [[ wm == "X11" ]]; then
    command -v xsel &>/dev/null || {
        echo "We rely on xsel for the clipboard. Please, install xsel." >&2
        exit 1 
    }
fi

set -e

##
## Process command line arguments
##

while [ $# -gt 0 ]; do
    case "$1" in
        -c|--clipboard)
            CLIPBOARD=true
            shift
            ;;
        -w|--whisper-cpp)
            use_whisper_cpp=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [-c|--clipboard] [-n|--netapi]"
            echo "  -c, --clipboard: Use clipboard instead of PRIMARY selection"
            echo "  -n, --netapi: Use whisper.cpp server with the host:port in the GONFIG block"
            exit 0
            ;;
    esac
done

##
## Record audio
##

# Send notification that recording is starting
nid=$(notify-send -a WSI -p -i audio-input-microphone "Recording..." "Speak now")


rec -q -t wav $ramf rate 16k silence 1 0.1 1% 1 2.0 5%  2>/dev/null

# Send notification that recording has ended and transcription is starting
nid=$(notify-send -a WSI -p -r $nid -i audio-input-microphone "Recording Finished" "Transcribing...")

##
## Transcribe audio
##
 
if [[ "$use_whisper_cpp" == true ]]; then
    str="$(whisper-cpp -t $NTHR -nt -m $model -f $ramf 2>/dev/null)" 
else
    str=$(curl -s \
        --request POST \
        --url https://api.openai.com/v1/audio/transcriptions \
        --header "Authorization: Bearer $(openai-api-key)" \
        --header 'Content-Type: multipart/form-data' \
        --form "file=@$ramf" \
        --form model=whisper-1 | jq -r .text)
fi

##
## Cleanup whisper output
##

# Remove text between parentheses (like sound effects annotations)
# Example: "hello (dog barking) world" -> "hello world"
str="${str/\(*\)}"   

# Remove text between square brackets
# Example: "hello [laughter] world" -> "hello world"
str="${str/\[*\]}"

# Remove a single leading newline character, if present
str="${str#$'\n'}"    
# Remove another leading newline character, if present
# (Two removals handle cases with multiple newlines)
str="${str#$'\n'}"

# Remove all leading whitespace using Bash's extended pattern matching
# The ++ indicates "one or more" of the pattern
str="${str##+([[:space:]])}"
# Capitalize only the first character of the string
# Example: "hello world" -> "Hello world"
str="${str^}"

# Send notification with transcription result
notify-send  -a WSI -p -r $nid -i audio-input-microphone "Transcribed" "$str"

##
## Cleanup whisper output
##

if [[ -z "${DISPLAY}" ]] || [[ -z "${DESKTOP_SESSION}" ]] || [[ -z "${XDG_CURRENT_DESKTOP}" ]]; then
    # Not running in a known graphics environment. Using standard output:
    echo $str ; exit 0
else
    case "$wm" in
        "x11")
            if [ "$CLIPBOARD" = true ]; then
                echo $str | xsel -ib
            else
                echo $str | xsel -ip
            fi
            ;;
        "wayland")
            if [ "$CLIPBOARD" = true ]; then
                echo $str | wl-copy
            else
                echo $str | wl-copy -p
            fi 
            ;;
        *)
            echo $str
            ;;
    esac
fi

#+TITLE: Home Manager

* Common Packages
#+NAME: common-packages
#+BEGIN_SRC nix
## CLI

(aspellWithDicts (d: [d.en]))
(hunspellWithDicts (with hunspellDicts; [en-us]))
awscli
babashka
bat           # cat clone with syntax highlighting and git integration
bitwarden-cli
clojure
docker-compose
exiftool      # cli app for reading, writing and editing meta information
fd            # alternative to find
fzf           # cli fuzzy finder
git
git-lfs
gitAndTools.git-annex
httpie
jq
lazygit       # terminal UI for git
mediainfo     # unified display of technical and tag data for video and audio files
nixfmt        # Nix code formatter
nmap
odt2txt       # for opendocument previews
openjdk
poppler_utils # for pdf previews
python3
python38Packages.pdftotext
ranger
ripgrep
rmapi         # cli tool for interacting with reMarkable cloud
shellcheck
tmuxp         # tmux workspace manager
w3m
#+END_SRC
* Desktop Packages
#+NAME: desktop-packages
#+BEGIN_SRC nix
## Desktop

# X utils
flameshot     # screenshot tool
hacksaw       # area selection tool
nomacs        # image viewer
rofi
shotgun       # screenshot tool
wmctrl
xdotool
xdotool
xorg.xev
xorg.xprop
xorg.xwininfo

# Communication
discord
signal-desktop
slack

# Fonts
carlito

# Gnome utils
gnome3.dconf-editor

# Graphics
gimp
inkscape

# misc
bitwarden
brave
clojure-lsp
emacs
ffmpegthumbnailer  # video thumbnailer
spotify
standardnotes
steam-run
wine
youtube-dl
#+END_SRC
** Tools for Thought
#+NAME: desktop-thinking-tools
#+BEGIN_SRC nix
# tools for thought
drawio
libreoffice
#yed
#+END_SRC
* CLI Config
#+BEGIN_SRC nix :noweb yes :tangle config/nixpkgs/home.nix
{ config, pkgs, ... }:

{
  nixpkgs.config.allowUnfree = true;

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  home.packages = with pkgs; [
    <<common-packages>>
  ];

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "20.09";
}
#+END_SRC
* Desktop Config
#+BEGIN_SRC nix :noweb yes :tangle tag-desktop/config/nixpkgs/home.nix
{ config, pkgs, ... }:

{
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  nixpkgs.config.allowUnfree = true;

  fonts.fontconfig.enable = true;

  home.homeDirectory = "/home/djwhitt";
  home.username = "djwhitt";

  home.packages = with pkgs; [
    <<common-packages>>

    <<desktop-packages>>

    <<desktop-thinking-tools>>
  ];

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "20.09";
}
#+END_SRC
